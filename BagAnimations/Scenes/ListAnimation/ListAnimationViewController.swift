//
//  ListAnimationViewController.swift
//  BagAnimations
//
//  Created by kkolontay on 10/30/17.
//  Copyright (c) 2017 kkolontay.com. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListAnimationDisplayLogic: class
{
//  func displaySomething(viewModel: ListAnimation.Something.ViewModel)
  func displayAnimations(viewModel: ListAnimation.FetchAnimationItems.ViewModel)
}

class ListAnimationViewController: UIViewController, ListAnimationDisplayLogic
{
  
  var interactor: ListAnimationBusinessLogic?
  var router: (NSObjectProtocol & ListAnimationRoutingLogic & ListAnimationDataPassing)?
  @IBOutlet weak var collectionAnimations: UICollectionView!
  @IBOutlet weak var animationSearchBar: UISearchBar!
  var listAnimations: [ListAnimation.FetchAnimationItems.ViewModel.Animation] = Array<ListAnimation.FetchAnimationItems.ViewModel.Animation>()
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListAnimationInteractor()
    let presenter = ListAnimationPresenter()
    let router = ListAnimationRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
   // doSomething()
    animationSearchBar.delegate = self
    let layout = collectionAnimations.collectionViewLayout as! AnimationCollectionViewLayout
    layout.delegate = self
    fetchAnimations(nil)
  }
  
  func fetchAnimations(_ subjectForSearching: String?) {
    let request = ListAnimation.FetchAnimationItems.Request(searchingSubject: subjectForSearching)
    interactor?.fetchAnimation(request: request)
    
  }
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
//  func doSomething()
//  {
//    let request = ListAnimation.Something.Request()
//    interactor?.doSomething(request: request)
//  }
  
//  func displaySomething(viewModel: ListAnimation.Something.ViewModel)
//  {
//    //nameTextField.text = viewModel.name
//  }
  func displayAnimations(viewModel: ListAnimation.FetchAnimationItems.ViewModel) {
    if viewModel.animations == nil {
      listAnimations = Array<ListAnimation.FetchAnimationItems.ViewModel.Animation>()
      collectionAnimations.reloadData()
      showAlert(viewModel.error ?? "")
    } else {
       DispatchQueue.main.async {
        self.listAnimations = viewModel.animations!
        self.collectionAnimations.reloadData()
      }
    }
  }
  func showAlert(_ alertMessage: String) {
    let alertController = UIAlertController(title: "Alert", message: alertMessage, preferredStyle: .alert)
    let alertAction = UIAlertAction(title: "OK", style: .cancel, handler: nil)
    alertController.addAction(alertAction)
    present(alertController, animated: true, completion: nil)
  }
}

extension ListAnimationViewController: UICollectionViewDataSource {
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! AnimationCollectionViewCell
    return cell
  }
  
  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
      return listAnimations.count
  }
}

extension ListAnimationViewController: UICollectionViewDelegate {
  public func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
    
  }
}

extension ListAnimationViewController: UISearchBarDelegate {
  func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String)  {
    
    if searchText.count > 1 {
      fetchAnimations(searchText)
    }
    if searchText.count == 0 {
      fetchAnimations(nil)
    }
  }
}

extension ListAnimationViewController: AnimationLayoutDelegate {
  func collectionView(_ collectionView: UICollectionView, heightForPhotoAtIndexPath indexPath: IndexPath) -> CGFloat {
   let layout = collectionView.collectionViewLayout as! AnimationCollectionViewLayout
    let index = layout.contentWidth / (listAnimations[indexPath.row] ).width
    return (listAnimations[indexPath.row] ).height * index
  }
}
