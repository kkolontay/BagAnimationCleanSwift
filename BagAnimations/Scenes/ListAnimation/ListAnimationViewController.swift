//
//  ListAnimationViewController.swift
//  BagAnimations
//
//  Created by kkolontay on 10/30/17.
//  Copyright (c) 2017 kkolontay.com. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListAnimationDisplayLogic: class
{
  func displaySomething(viewModel: ListAnimation.Something.ViewModel)
}

class ListAnimationViewController: UIViewController, ListAnimationDisplayLogic
{
  var interactor: ListAnimationBusinessLogic?
  var router: (NSObjectProtocol & ListAnimationRoutingLogic & ListAnimationDataPassing)?
  @IBOutlet weak var collectionAnimations: UICollectionView!
  @IBOutlet weak var searchBar: UISearchBar!
  var images = [UIImage]()
  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
  {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder)
  {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup()
  {
    let viewController = self
    let interactor = ListAnimationInteractor()
    let presenter = ListAnimationPresenter()
    let router = ListAnimationRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?)
  {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad()
  {
    super.viewDidLoad()
    doSomething()
    let layout = collectionAnimations.collectionViewLayout as! AnimationCollectionViewLayout
    layout.delegate = self
  }
  
  // MARK: Do something
  
  //@IBOutlet weak var nameTextField: UITextField!
  
  func doSomething()
  {
    let request = ListAnimation.Something.Request()
    interactor?.doSomething(request: request)
  }
  
  func displaySomething(viewModel: ListAnimation.Something.ViewModel)
  {
    //nameTextField.text = viewModel.name
  }
}


extension ListAnimationViewController: UICollectionViewDataSource {
  func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
    let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "cell", for: indexPath) as! AnimationCollectionViewCell
    return cell
  }
  
  func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
    return 1
  }
}

extension ListAnimationViewController: UICollectionViewDelegate {
  public func collectionView(_ collectionView: UICollectionView, willDisplay cell: UICollectionViewCell, forItemAt indexPath: IndexPath) {
    
  }
}

extension ListAnimationViewController: UISearchBarDelegate {
  func searchBar(_ searchBar: UISearchBar, textDidChange searchText: String)  {
    
  }
}

extension ListAnimationViewController: AnimationLayoutDelegate {
  func collectionView(_ collectionView: UICollectionView, heightForPhotoAtIndexPath indexPath: IndexPath) -> CGFloat {
    
    //MARK: need resolved this issue
    return 100
  }
}
